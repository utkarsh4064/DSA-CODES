#include <iostream>

using namespace std;

struct Node{
    struct Node* left;
    int data;
    struct Node* right;
}*root=NULL;

struct queue{
    int front;
    int rear;
    int size;
    struct Node** p;
}*q;

void enqueue(struct Node* x){
    if(q->front==-1)
    q->front=0;
    q->rear++;
    q->p[q->rear]=x;
}

struct Node* dequeue(){
    if(q->front==-1)
    return NULL;
    struct Node* temp=q->p[q->front];
    q->front++;
    if(q->front > q->rear)
    q->front=q->rear=-1;
    return temp;
}

int isEmpty(){
    if(q->front==-1)
    return 1;
    return 0;
}

void createTree(){
    int x=0;
    root = new struct Node;
    cout<<"enter the root data\n";
    cin>>root->data;
    root->left=root->right=NULL;
    struct Node* p=NULL;
    struct Node* temp;
    enqueue(root);
    while(!isEmpty()){
        p=dequeue();
        cout<<"enter the left child value of "<<p->data<<"\n";
        cin>>x;
        if(x!=-1)
        {
            temp= new struct Node;
            temp->data=x;
            temp->left=temp->right=NULL;
            p->left=temp;
            enqueue(temp);
        }
          
            
        cout<<"enter the right child value of "<<p->data<<"\n";
        cin>>x;
        if(x!=-1)
        {
            temp= new struct Node;
            temp->data=x;
            temp->left=temp->right=NULL;
            p->right=temp;
            enqueue(temp);
        }
        
    }
}

void preorder(struct Node* p){
    if(p){
        cout<<p->data<<" ";
        preorder(p->left);
        preorder(p->right);
    }
}

void inorder(struct Node* p){
    if(p){
        inorder(p->left);
        cout<<p->data<<" ";
        inorder(p->right);
    }
}

void postorder(struct Node* p){
    if(p){
        postorder(p->left);
        postorder(p->right);
        cout<<p->data<<" ";
    }
}

void levelorder(){
    struct Node* p;
    p=new struct Node;
    enqueue(root);
    while(!isEmpty()){
        p=dequeue();
        cout<<p->data<<" ";
        if(p->left)
        enqueue(p->left);
        if(p->right)
        enqueue(p->right);
    }
}

int count(struct Node *p){
    if(p){
        return count(p->left)+count(p->right)+1;
    }
    return 0;
}

int height(struct Node *p){
    int x,y=0;
    if(p){
        x=height(p->left);
        y=height(p->right);
        if(x>y)
        return x+1;
        return y+1;
    }
    return 0;
}

int leafnodes(struct Node *p){
    int x,y=0;
    if(p){
        if(!p->left && !p->right)
        return leafnodes(p->left)+leafnodes(p->right)+1;
        return leafnodes(p->left)+leafnodes(p->right);
    }
    return 0;
}

int main(){
  q=new struct queue;
  q->size=100;
  q->p=new struct Node*[q->size];
  q->front=-1;
  q->rear=-1;
  createTree(); 
  preorder(root);
  cout<<"\n";
  inorder(root);
  cout<<"\n";
  postorder(root);
  cout<<"\n";
  levelorder();
  cout<<"\n";
  cout<<"the number of nodes are: "<<count(root)<<"\n";
  cout<<"the height of the tree is: "<<height(root)<<"\n";
  cout<<"the number of leaf-nodes are: "<<leafnodes(root)<<"\n";
}
